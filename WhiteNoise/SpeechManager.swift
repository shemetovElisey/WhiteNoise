//
//  SpeechManager.swift
//  WhiteNoise
//
//  Created by Shemetov Elisey on 05.07.2025.
//

import Foundation
import AppKit

enum RecognitionMode: String, CaseIterable {
    case local = "local"
    case openai = "openai"
    case auto = "auto"
    
    var displayName: String {
        switch self {
        case .local:
            return "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å"
        case .openai:
            return "OpenAI API"
        case .auto:
            return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä"
        }
    }
}

class SpeechManager {
    private let localRecognizer = LocalSpeechRecognizer()
    private let openAIRecognizer = SpeechRecognizer()
    
    private var currentMode: RecognitionMode {
        get {
            let savedMode = UserDefaults.standard.string(forKey: "RecognitionMode") ?? "auto"
            return RecognitionMode(rawValue: savedMode) ?? .auto
        }
        set {
            UserDefaults.standard.set(newValue.rawValue, forKey: "RecognitionMode")
        }
    }
    
    func transcribeAudio(fileURL: URL, completion: @escaping (Result<String, Error>) -> Void) {
        switch currentMode {
        case .local:
            transcribeWithLocal(fileURL: fileURL, completion: completion)
        case .openai:
            transcribeWithOpenAI(fileURL: fileURL, completion: completion)
        case .auto:
            transcribeWithAuto(fileURL: fileURL, completion: completion)
        }
    }
    
    private func transcribeWithLocal(fileURL: URL, completion: @escaping (Result<String, Error>) -> Void) {
        print("[SpeechManager] –í—ã–∑–≤–∞–Ω transcribeWithLocal –¥–ª—è —Ñ–∞–π–ª–∞: \(fileURL.path)")
        localRecognizer.transcribeAudio(fileURL: fileURL) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let text):
                    print("[SpeechManager] –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç: '\(text)'")
                    print("[SpeechManager] –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
                    self?.insertTextToFrontmostApp(text)
                    completion(.success(text))
                case .failure(let error):
                    print("[SpeechManager] –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: \(error.localizedDescription)")
                    completion(.failure(error))
                }
            }
        }
    }
    
    private func insertTextToFrontmostApp(_ text: String) {
        print("[SpeechManager] –í—ã–∑–≤–∞–Ω–∞ insertTextToFrontmostApp —Å —Ç–µ–∫—Å—Ç–æ–º: '\(text)'")
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
        
        print("[SpeechManager] –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: '\(text)'")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        let notification = NSUserNotification()
        notification.title = "WhiteNoise - –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤"
        notification.informativeText = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cmd+V –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        notification.soundName = NSUserNotificationDefaultSoundName
        
        NSUserNotificationCenter.default.deliver(notification)
        
        // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –≤—Å—Ç–∞–≤–∫–∏
        DispatchQueue.global(qos: .background).async {
            // –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞
            self.trySimpleTextInsertion(text)
            
            // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ + Cmd+V (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                self.tryClipboardPaste()
            }
        }
    }
    
    private func trySimpleTextInsertion(_ text: String) {
        // –ë–æ–ª–µ–µ –ø—Ä—è–º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞
        let script = """
        tell application "System Events"
            set frontmostApp to name of first application process whose frontmost is true
            log "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: " & frontmostApp
            delay 0.1
            keystroke "\(text)"
        end tell
        """
        
        let task = Process()
        task.launchPath = "/usr/bin/osascript"
        task.arguments = ["-e", script]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        task.standardError = pipe
        
        task.terminationHandler = { process in
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? ""
            
            if process.terminationStatus == 0 {
                print("[SpeechManager] ‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                DispatchQueue.main.async {
                    let notification = NSUserNotification()
                    notification.title = "WhiteNoise - –£—Å–ø–µ—Ö"
                    notification.informativeText = "–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                    notification.soundName = NSUserNotificationDefaultSoundName
                    NSUserNotificationCenter.default.deliver(notification)
                }
            } else {
                print("[SpeechManager] ‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cmd+V")
                print("[SpeechManager] –û—à–∏–±–∫–∞: \(output)")
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                DispatchQueue.main.async {
                    let notification = NSUserNotification()
                    notification.title = "WhiteNoise - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cmd+V"
                    notification.informativeText = "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Cmd+V –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏."
                    notification.soundName = NSUserNotificationDefaultSoundName
                    NSUserNotificationCenter.default.deliver(notification)
                }
            }
        }
        
        do {
            try task.run()
            print("[SpeechManager] üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏...")
        } catch {
            print("[SpeechManager] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AppleScript: \(error)")
        }
    }
    
    private func tryClipboardPaste() {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Cmd+V
        let script = """
        tell application "System Events"
            set frontmostApp to name of first application process whose frontmost is true
            log "–ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Cmd+V –≤: " & frontmostApp
            delay 0.2
            key code 9 using {command down}
        end tell
        """
        
        let task = Process()
        task.launchPath = "/usr/bin/osascript"
        task.arguments = ["-e", script]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        task.standardError = pipe
        
        task.terminationHandler = { process in
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? ""
            
            if process.terminationStatus == 0 {
                print("[SpeechManager] ‚úÖ –í—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Cmd+V –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            } else {
                print("[SpeechManager] ‚ÑπÔ∏è –í—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Cmd+V –Ω–µ —É–¥–∞–ª–∞—Å—å: \(output)")
            }
        }
        
        do {
            try task.run()
        } catch {
            print("[SpeechManager] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cmd+V: \(error)")
        }
    }
    
    private func transcribeWithOpenAI(fileURL: URL, completion: @escaping (Result<String, Error>) -> Void) {
        print("[SpeechManager] –í—ã–∑–≤–∞–Ω transcribeWithOpenAI –¥–ª—è —Ñ–∞–π–ª–∞: \(fileURL.path)")
        openAIRecognizer.transcribeAudio(fileURL: fileURL) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let text):
                    print("[SpeechManager] OpenAI –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç: '\(text)'")
                    print("[SpeechManager] –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
                    self?.insertTextToFrontmostApp(text)
                    completion(.success(text))
                case .failure(let error):
                    print("[SpeechManager] –û—à–∏–±–∫–∞ OpenAI: \(error.localizedDescription)")
                    completion(.failure(error))
                }
            }
        }
    }
    
    private func transcribeWithAuto(fileURL: URL, completion: @escaping (Result<String, Error>) -> Void) {
        print("[SpeechManager] –í—ã–∑–≤–∞–Ω transcribeWithAuto –¥–ª—è —Ñ–∞–π–ª–∞: \(fileURL.path)")
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenAI, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        transcribeWithOpenAI(fileURL: fileURL) { [weak self] result in
            switch result {
            case .success(let text):
                print("[SpeechManager] OpenAI —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç: '\(text)'")
                print("[SpeechManager] –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
                self?.insertTextToFrontmostApp(text)
                completion(.success(text))
            case .failure(let error):
                // –ï—Å–ª–∏ OpenAI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                print("[SpeechManager] OpenAI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: \(error.localizedDescription), –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å")
                self?.transcribeWithLocal(fileURL: fileURL, completion: completion)
            }
        }
    }
    
    func setRecognitionMode(_ mode: RecognitionMode) {
        currentMode = mode
    }
    
    func getCurrentMode() -> RecognitionMode {
        return currentMode
    }
    
    func isLocalModelAvailable() -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Whisper –≤ –±–∞–Ω–¥–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        guard let whisperPath = Bundle.main.path(forResource: "whisper-cli", ofType: nil) else {
            return false
        }
        guard FileManager.default.fileExists(atPath: whisperPath) else {
            return false
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let homeDir = URL(fileURLWithPath: "/Users/elisey")
        let modelPath = homeDir.appendingPathComponent("Documents/whisper-models/ggml-tiny.bin")
        return FileManager.default.fileExists(atPath: modelPath.path)
    }
    
    func isOpenAIAvailable() -> Bool {
        let apiKey = UserDefaults.standard.string(forKey: "OpenAI_API_Key") ?? ""
        return !apiKey.isEmpty
    }
    
    func getAvailableModes() -> [RecognitionMode] {
        var modes: [RecognitionMode] = []
        
        if isLocalModelAvailable() {
            modes.append(.local)
        }
        
        if isOpenAIAvailable() {
            modes.append(.openai)
        }
        
        if !modes.isEmpty {
            modes.append(.auto)
        }
        
        return modes
    }
} 
